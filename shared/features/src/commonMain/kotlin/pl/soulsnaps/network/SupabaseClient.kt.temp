package pl.soulsnaps.network

import io.github.jan.supabase.createSupabaseClient
import io.github.jan.supabase.gotrue.GoTrue
import io.github.jan.supabase.postgrest.Postgrest
import io.github.jan.supabase.storage.Storage
import io.github.jan.supabase.realtime.Realtime
import io.ktor.client.HttpClient

object SupabaseClient {
    
    // TODO: Replace with your actual Supabase URL and anon key
    private const val SUPABASE_URL = "https://your-project.supabase.co"
    private const val SUPABASE_ANON_KEY = "your-anon-key"
    
    private var _client: io.github.jan.supabase.SupabaseClient? = null
    
    fun createClient(httpClient: HttpClient): io.github.jan.supabase.SupabaseClient {
        if (_client == null) {
            _client = createSupabaseClient(
                supabaseUrl = SUPABASE_URL,
                supabaseKey = SUPABASE_ANON_KEY
            ) {
                install(GoTrue) {
                    // Configure authentication
                }
                install(Postgrest) {
                    // Configure database
                }
                install(Storage) {
                    // Configure storage
                }
                install(Realtime) {
                    // Configure realtime
                }
            }
        }
        return _client!!
    }
    
    fun getClient(): io.github.jan.supabase.SupabaseClient {
        return _client ?: throw IllegalStateException("Supabase client not initialized. Call createClient() first.")
    }
    
    fun getAuth() = getClient().goTrue
    fun getDatabase() = getClient().postgrest
    fun getStorage() = getClient().storage
    fun getRealtime() = getClient().realtime
}
